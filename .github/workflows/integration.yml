name: Integration Pipeline
on:
  push:
    tags:
      - 'v*'
    branches:
      - master
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
jobs:
  configure:
    name: Preliminary configuration
    runs-on: ubuntu-latest
    outputs:
      commit_ref: ${{ steps.configure.outputs.commit_ref }}
      repo-suffix: ${{ steps.configure.outputs.repo-suffix }}
      ok-to-continue: ${{ steps.configure.outputs.ok-to-continue }}
      master: ${{ steps.configure.outputs.master }}
      repo-name: ${{ steps.configure.outputs.repo-name }}
    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      if: startsWith(github.ref, 'refs/tags/v')
    - name: Configure
      id: configure
      run: |
        # The ref of the commit to checkout (do not use the merge commit if pull request)
        if [ "${{ github.event_name }}" == "pull_request_target" ]; then
          echo "::set-output name=master::false"
          echo "::set-output name=commit_ref::${{ github.event.pull_request.head.sha }}"
        elif [ "${{ steps.get_version.outputs.VERSION }}" != "" ]; then
          echo "::set-output name=master::false"
          echo "::set-output name=commit_ref::${{ steps.get_version.outputs.VERSION }}"
        else
          echo "::set-output name=master::true"
          echo "::set-output name=commit_ref::${{ github.sha }}"
        fi

        # The suffix to append to the repository name if not triggered by a push to master
        [[ "${{ steps.get_version.outputs.VERSION }}" == "" ]] && \
          echo "::set-output name=repo-suffix::-ci" ||
          echo "::set-output name=repo-suffix::"

        if [ "${{ github.event_name }}" != "pull_request_target" ]; then
           echo "::set-output name=ok-to-continue::true"
           echo "::set-output name=repo-name::${{ github.repository }}"
        elif [ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]; then
           echo "::set-output name=ok-to-continue::true"
           echo "::set-output name=repo-name::${{ github.repository }}"
        elif [ "${{ contains(github.event.pull_request.labels.*.name, 'ok-to-test') }}" == "true" ]; then
           echo "::set-output name=ok-to-continue::true"
           echo "::set-output name=repo-name::${{ github.event.pull_request.head.repo.full_name }}"
        else
           echo "::set-output name=ok-to-continue::false"
           echo "::set-output name=repo-name::${{ github.event.pull_request.head.repo.full_name }}"
        fi


  release:
    runs-on: ubuntu-latest
    needs: [test, configure]
    if: github.event_name == 'push' && github.event.repository.full_name == 'liqotech/liqo-agent' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # The changelog generation requires the entire history
          fetch-depth: 0
          ref: "${{ needs.configure.outputs.commit_ref }}"
          repository: "${{ needs.configure.outputs.repo-name }}"
          persist-credentials: false

      - name: Get the LiqoAgent version to be released
        id: version
        run: echo "version::${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Get the latest LiqoAgent release
        uses: pozetroninc/github-action-get-latest-release@v0.5.0
        id: last-release
        with:
          repository: ${{ github.repository }}

      - name: Generate the CHANGELOG
        uses: RiskLedger/generate-changelog@v1.2
        id: changelog
        with:
          from: ${{ steps.last-release.outputs.release }}
          to: ${{ needs.configure.outputs.commit_ref }}
        env:
          GITHUB_AUTH: ${{ secrets.CI_TOKEN }}

      - name: Save the CHANGELOG as a file
        run: |
          echo "${{ steps.changelog.outputs.changelog }}" > ./CHANGELOG.md
          sed -i "1s/.*/## Changes since ${{ needs.configure.outputs.commit_ref }}/" ./CHANGELOG.md

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.configure.outputs.commit_ref }}
          release_name: ${{ needs.configure.outputs.commit_ref }}
          body_path: ./CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

# Agent Upload Artifact
      - name: Download Agent artifact
        uses: actions/download-artifact@v2
        with:
          name: agent_artifact

      - name: Upload Agent asset to release
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: liqo-agent.tar.gz
          asset_content_type: application/gzip
          github_token: ${{ secrets.CI_TOKEN }}
          overwrite: true


  test:
    name: Launch Test and Build Liqo Agent
    runs-on: ubuntu-20.04
    needs: configure
    if: needs.configure.outputs.ok-to-continue == 'true' && github.event.pull_request.draft == false
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v2
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        ref: "${{ needs.configure.outputs.commit_ref }}"
        repository: "${{ needs.configure.outputs.repo-name }}"
        persist-credentials: false

    - name: Get dependencies for Test execution
      run: |
        go get -u github.com/ory/go-acc
        go get -u github.com/cratonica/2goarray

    - name: install LiqoAgent dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt update
        sudo apt-get -y install gcc libgtk-3-dev libappindicator3-dev libxapp-dev libwebkit2gtk-4.0-dev xclip

    - name: generate LiqoAgent icons
      run: |
        chmod +x ./scripts/make_icon.sh
        ./scripts/make_icon.sh

    - name: Launch Test
      run: go-acc ./...

    - name: Send coverage
      uses: shogo82148/actions-goveralls@v1
      with:
        path-to-profile: coverage.txt

    - name: Build Agent asset
      run: |
        GO111MODULE=on CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build ./cmd/tray-agent/liqo-agent.go
        tar -czf liqo-agent.tar.gz liqo-agent
      if: github.event_name == 'push' && github.event.repository.full_name == 'liqotech/liqo-agent' && startsWith(github.ref, 'refs/tags/v')

    - name: Upload LiqoAgent artifact
      uses: actions/upload-artifact@v2
      with:
        name: agent_artifact
        path: liqo-agent.tar.gz
        retention-days: 1
        if-no-files-found: error
      if: github.event_name == 'push' && github.event.repository.full_name == 'liqotech/liqo-agent' && startsWith(github.ref, 'refs/tags/v')

  wait-approve:
    name: Wait for the ok-to-test label to test pr on fork
    runs-on: ubuntu-20.04
    needs: configure
    if: needs.configure.outputs.ok-to-continue == 'false'
    steps:
      - name: Issue the greeting comment
        uses: peter-evans/create-or-update-comment@v1
        with:
            token: ${{ secrets.CI_TOKEN }}
            issue-number: ${{ github.event.pull_request.number }}
            body: |
              Hi @${{ github.event.pull_request.user.login }}. Thanks for your PR!

              I'm waiting for a Liqo member to verify that this patch is reasonable to test. If it is, they should reply with /ok-to-test.

              Once the patch is verified, the new status will be reflected by the ok-to-test label.